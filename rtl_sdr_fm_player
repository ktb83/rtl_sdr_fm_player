#!/usr/bin/python3

from tkinter import *
import tkinter as tk
import subprocess
import time
import threading
import os
import configparser
from functools import partial
import socket
import json
from json.decoder import JSONDecodeError
import setproctitle

setproctitle.setproctitle('rtl_sdr_fm_player')

Stop = True
Muted = False
Server = False
Tuning = 'stopped'
CPU = 0
# Program Service Name
PS = ''
# Radio Text
RT = ''

def appResPath(theFile):
    return os.path.join(os.path.dirname(__file__), theFile)

def permissive_json_loads(text):
    while True:
        try:
            data = json.loads(text)
        except JSONDecodeError as exc:
            if exc.msg == 'Invalid \\escape':
                text = text[:exc.pos] + '\\' + text[exc.pos:]
            else:
                raise
        else:
            return data

config = configparser.ConfigParser()
config.read(appResPath('settings.ini'))

host = config['Server']['ip address']
port = config['Server']['server port']
api_port = config['Server']['server api port']

stations = dict({i: config['Stations'][i] for i in config['Stations']})
frequencies = list(stations.keys())
print(frequencies)
frequencies.sort(key=float)
print(frequencies)
FREQ = frequencies[0]

background_color = config['GUI']['background color']
font_color = config['GUI']['text color']
button_color = config['GUI']['button color']
if button_color == 'black':
    icon_path = appResPath('icons/black_icons/')
else:
    icon_path = appResPath('icons/white_icons/')

#play_string = ('rtl_fm -f %sM -M fm -s 170k -A std -l 0 -E deemp -r 44.1k | '
#               'redsea -e 2>> /tmp/rds-data.json | '
#               'ffplay -nodisp -f s16le -ac 1 -i pipe:0')

temp_dir = subprocess.check_output(
           'tempdir=$(mktemp -dt "rtl_sdr_fm_player.XXXXXXXX" --tmpdir=/run/user/$(id -u));echo -n $tempdir',
           shell=True).decode('utf-8')
rds_log = subprocess.check_output(
          'tempfile=$(mktemp -t "rds.XXXXXXXX" --tmpdir=' + temp_dir + ');echo -n $tempfile',
          shell=True).decode('utf-8')

play_string = ('truncate -s0 ' + rds_log + ';'
               'rtl_fm -M fm -l 0 -A std -p 0 -s 171k -g 40 -F 9 -f %sM -E deemp | '
               'redsea -e 2>> ' + rds_log + ' | '
               'aplay -D pulse -t raw -r 171000 -c 1 -f S16_LE')

if config['Server']['rtl_fm_streamer'] == 'true':
    Server = True
    play_string = ('ffplay -nodisp http://%s:%s/freq/%s' %
                   (host, port, config['Server']['stereo']))
    if config['Server']['start server'] == 'true':
        subprocess.Popen(['rtl_fm_streamer', '-P', port])


class RoundedButton(tk.Canvas):
    def __init__(self, parent, width, height, cornerradius, padding, color, bg,
                 image=None, press_command=None, release_command=None,
                 repeatdelay=None, repeatinterval=None):
        tk.Canvas.__init__(self, parent, borderwidth=0,
            relief="flat", highlightthickness=0, bg=bg)
        self.image = image
        self.press_command = press_command
        self.release_command = release_command
        self.repeatdelay = repeatdelay
        self.repeatinterval = repeatinterval
        self.after_id = None
        self.parent = parent
        self.canvas_back = None

        if cornerradius > 0.5*width:
            print("Error: cornerradius is greater than width.")
            return None

        if cornerradius > 0.5*height:
            print("Error: cornerradius is greater than height.")
            return None

        rad = 2*cornerradius
        def shape():
            self.create_polygon((padding,height-cornerradius-padding,padding,
                                 cornerradius+padding,padding+cornerradius,padding,
                                 width-padding-cornerradius,padding,width-padding,
                                 cornerradius+padding,width-padding,
                                 height-cornerradius-padding,width-padding-cornerradius,
                                 height-padding,padding+cornerradius,height-padding),
                                 fill=color, outline=color)
            self.create_arc((padding,padding+rad,padding+rad,padding),
                             start=90, extent=90, fill=color, outline=color)
            self.create_arc((width-padding-rad,padding,width-padding,padding+rad),
                             start=0, extent=90, fill=color, outline=color)
            self.create_arc((width-padding,height-rad-padding,width-padding-rad,
                             height-padding), start=270, extent=90, fill=color, outline=color)
            self.create_arc((padding,height-padding-rad,padding+rad,height-padding),
                             start=180, extent=90, fill=color, outline=color)


        id = shape()
        (x0,y0,x1,y1)  = self.bbox("all")
        width = (x1-x0)
        height = (y1-y0)
        self.configure(width=width, height=height)
        self.bind("<ButtonPress-1>", self._on_press)
        self.bind("<ButtonRelease-1>", self._on_release)
        if self.image is not None:
            bg_pos_x = (width / 2)
            bg_pos_y = (height / 2)
            self.canvas_back = self.create_image(bg_pos_y, bg_pos_y, image=self.image)

    def _on_press(self, event):
        self.configure(relief="sunken")
        if self.press_command is not None:
            self.press_command()
            if self.repeatdelay is not None:
                self.after_id = self.after(self.repeatdelay, self._on_repeat)

    def _on_repeat(self):
        self.configure(relief="sunken")
        if self.press_command is not None:
            self.press_command()
            if self.repeatinterval is not None:
                self.after_id = self.after(self.repeatinterval, self._on_repeat)

    def _on_release(self, event):
        self.configure(relief="raised")
        if self.after_id is not None:
            self.after_cancel(self.after_id)
        if self.release_command is not None:
            self.release_command()

    def update_image(self, image=None):
        if image is not None:
            bg_pos_x = (width / 2)
            bg_pos_y = (height / 2)
            self.itemconfig(self.canvas_back, image=image)


def make_request(payload):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((host, int(api_port)))
        s.sendall(json.dumps(payload).encode('utf-8'))
        data = s.recv(1024)
        print('Received', str(json.loads(data)))


def set_frequency(frequency):
    global preset_list
    global preset_rb_var
    freq = int(float(frequency) * 1000000)
    print('setting frequency to %s' % freq)
    payload = {"method": "SetFrequency", "params": [freq]}
    make_request(payload)
    if frequency in preset_list:
        preset_rb_var.set(freq)
    else:
        preset_rb_var.set(None)


def get_power_level():
    payload = {"method": "GetPowerLevel"}
    make_request(payload)


# credit https://rosettacode.org/wiki/Linux_CPU_utilization
def get_cpu_utilisation():
    global CPU
    last_idle = last_total = 0
    while True and CPU is not None:
        with open('/proc/stat') as f:
            fields = [float(column) for column in f.readline().strip().split()[1:]]
        idle, total = fields[3], sum(fields)
        idle_delta, total_delta = idle - last_idle, total - last_total
        last_idle, last_total = idle, total
        utilisation = 100.0 * (1.0 - idle_delta / total_delta)
        print('%5.1f%%' % utilisation, end='\r')
        CPU = ('%5.1f%%' % utilisation)
        time.sleep(2)


def get_cpu_info():
    get_temp = subprocess.check_output(["vcgencmd", "measure_temp"])
    temp = get_temp.decode('utf-8').lstrip('temp=').replace("'", "Â°")
    cpu_text.config(text='CPU %s %s' % (temp, CPU))
    cpu_text.after(2000, get_cpu_info)


def play(p_string):
    print('Play String  %s' % p_string)
    global Stop
    p = subprocess.Popen(p_string, shell=True,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    while not Stop:
        time.sleep(.2)
    else:
        print('STOP: %s' % Stop)
        p.terminate()
        if Server:
            subprocess.run(['killall', 'ffplay'])
        else:
            subprocess.run(['killall', '-s', 'SEGV', 'rtl_fm'])


def start(freq):
    global Stop
    global preset_list
    global preset_rb_var
    if Stop:
        print('starting play_thread')
        if Server:
            freq = int(float(freq) * 1000000)
            p_string = play_string.replace('/freq/', '/%s/' % freq)
        else:
            clear_station_data()
            p_string = play_string % freq
        play_thread = threading.Thread(target=play, args=([p_string]))
        play_thread.start()
        if freq in preset_list:
            preset_rb_var.set(freq)
        else:
            preset_rb_var.set(None)
        print(p_string)
        Stop = False
    else:
        print('stopping play_thread')
        Stop = True


def stop():
    global Stop
    Stop = True


def mute():
    global Muted
    if Muted:
        Muted = False
    else:
        Muted = True
    subprocess.run(['amixer', '-q', '-D', 'pulse', 'sset', 'Master', 'toggle'])


def vol_up():
    subprocess.run(['xdotool', 'key', 'F8'])


def vol_down():
    subprocess.run(['xdotool', 'key', 'F7'])


def next_station():
    if not Server:
        stop()
    global FREQ
    if FREQ in frequencies:
        current_frequency = frequencies.index(FREQ)
        if frequencies[current_frequency] == frequencies[-1]:
            FREQ = frequencies[0]
        else:
            FREQ = frequencies[current_frequency + 1]
    else:
        freq_list = [i for i in frequencies if i > FREQ]
        if freq_list:
            FREQ = freq_list[0]
        else:
            FREQ = frequencies[0]
    if Server:
        set_frequency(FREQ)
    else:
        time.sleep(1)
        start(FREQ)


def previous_station():
    if not Server:
        stop()
    global FREQ
    if FREQ in frequencies:
        current_frequency = frequencies.index(FREQ)
        if frequencies[current_frequency] == frequencies[0]:
            FREQ = frequencies[-1]
        else:
            FREQ = frequencies[current_frequency - 1]
    else:
        freq_list = [i for i in frequencies if i < FREQ]
        if freq_list:
            FREQ = freq_list[0]
        else:
            FREQ = frequencies[-1]
    if Server:
        set_frequency(FREQ)
    else:
        time.sleep(1)
        start(FREQ)


def preset_station(freq):
    if freq == 'Preset':
        return
    if not Server:
        stop()
    global FREQ
    FREQ = freq
    if Server:
        set_frequency(FREQ)
    else:
        time.sleep(1)
        start(FREQ)


def tune_up():
    global FREQ
    global Tuning
    if not Server:
        if not Stop:
            stop()
    if Tuning != 'started':
        Tuning = 'started'
    FREQ = str(round((float(FREQ) + 0.1), 1))
    print('Tune up %s' % FREQ)


def tune_down():
    global FREQ
    global Tuning
    if not Server:
        if not Stop:
            stop()
    if Tuning != 'started':
        Tuning = 'started'
    FREQ = str(round((float(FREQ) - 0.1), 1))
    print('Tune down %s' % FREQ)


def tuning_stop():
    global Tuning
    Tuning = 'finished'


def tune():
    global Tuning
    if Tuning == 'finished':
        if Server:
            set_frequency(FREQ)
        else:
            start(FREQ)
        Tuning = 'stopped'
        print('Tuning to %s' % FREQ)
    master.after(200, tune)


def power_off():
    global CPU
    CPU = None
    stop()
    subprocess.call('rm -r ' + temp_dir, shell=True)
    time.sleep(1)
    if Server:
        subprocess.run(['killall', 'rtl_fm_streamer'])
    master.destroy()

def back():
    master.wm_state("iconic")

def tick():
    time_string = ''
    time_now = time.strftime('%I:%M %p')
    if time_now != time_string:
        clock.config(text=time_now.lstrip('0'))
    clock.after(200, tick)


def update_freq_label():
    freq_text.config(text=FREQ)
    freq_text.after(100, update_freq_label)


def clear_station_data():
    global PS
    global RT
    PS = ''
    RT = ''
    station_text.config(text='')


def update_station_data():
    global PS
    global RT
    print('update_station')
    if not Server:
        previous_PS = PS
        previous_RT = RT
        subprocess.run(['touch', rds_log])
        try:
            rds_ps_json_lines = subprocess.check_output(['grep', '\"ps\"',
                                                         rds_log])
        except subprocess.CalledProcessError as e:
            if e.returncode > 1:
                raise
            rds_ps_json_lines = ''
        if rds_ps_json_lines != '':
            #print(rds_ps_json_lines)
            rds_ps_json = rds_ps_json_lines.decode('utf-8').splitlines()[-1]
            print(rds_ps_json)
            rds_ps_data = permissive_json_loads(rds_ps_json)
            PS = rds_ps_data[u'ps'].strip()
        try:
            rds_rt_json_lines = subprocess.check_output(['grep', '\"radiotext\"',
                                                         rds_log])
        except subprocess.CalledProcessError as e:
            if e.returncode > 1:
                raise
            rds_rt_json_lines = ''
        if rds_rt_json_lines != '':
            #print(rds_rt_json_lines)
            rds_rt_json = rds_rt_json_lines.decode('utf-8').splitlines()[-1]
            print(rds_rt_json)
            rds_rt_data = permissive_json_loads(rds_rt_json)
            RT = rds_rt_data[u'radiotext'].strip()
        if PS != previous_PS or RT != previous_RT:
            station_text.config(text='%s - %s' % (PS, RT))
        subprocess.call('echo "$(tail -n500 ' + rds_log + ')" > ' + rds_log,
                        shell=True)
    else:
        if FREQ in stations:
            station_text.config(text='%s' % stations[FREQ])
        else:
            station_text.config(text='%s' % FREQ)
    station_text.after(5000, update_station_data)


def update_play_button():
    if Stop:
        button_img = play_image
    else:
        button_img = stop_image
    play_button.update_image(button_img)
    play_button.after(200, update_play_button)


def update_vol_button():
    if Muted:
        button_image = vol_mute_image
    else:
        button_image = vol_image
    vol_button.update_image(button_image)
    vol_button.after(200, update_vol_button)


# Start of GUI
master = Tk()
master.title("RTL-SDR FM Player")

width = master.winfo_screenwidth()
height = master.winfo_screenheight()

if width > 800 or height > 480:
    master.geometry("800x480")
    master.wm_attributes('-zoomed', 1)
    master.wm_attributes('-fullscreen', 1)
else:
    # assuming Rpi 7in touch screen @ 800x480
    # makes full screen window
    master.geometry("%dx%d+0+0" % (width, height))
    master.wm_attributes('-zoomed', 1)
    master.wm_attributes('-fullscreen', 1)

canvas = Canvas(master, width=800, height=480)
canvas.config(background=background_color, highlightthickness=0)
canvas.pack()
background_image = PhotoImage(file=appResPath('background.png'))
canvas_back = canvas.create_image(400, 240, image=background_image)
title_text = canvas.create_text(400, 20, anchor=N, font=('Quicksand Medium', 16,
                                'bold', 'italic'), fill=font_color,
                                text='RTL-SDR FM Player', width=400)
freq_text = Label(master, font=("Quicksand Medium", 96, 'bold'),
                  fg=font_color, bg=background_color, padx=0, pady=0)
freq_text.config(justify='right', fg=font_color)
freq_text.place(relx=1, rely=1, x=-88, y=-104, anchor=SE)
freq_unit = Label(master, font=("Quicksand Medium", 24, 'bold'), fg=font_color,
                  bg=background_color, padx=0, pady=25, text='MHz')
freq_unit.config(justify='left', fg=font_color)
freq_unit.place(relx=1, rely=1, x=-20, y=-104, anchor=SE)
station_text = Label(master, font=("Quicksand Medium", 12, 'bold'),
                     fg=font_color, bg=background_color)
station_text.config(justify='left', width=29, wraplength=560, fg=font_color)
station_text.place(relx=1, rely=1, x=-88, y=-275, anchor=SE)
clock = Label(master, font=('Quicksand Medium', 16, 'bold'),
              bg=background_color, fg=font_color)
clock.place(relx=1, x=-20, y=20, anchor=NE)
cpu_text = Label(master, font=('Quicksand Medium', 16, 'bold', 'italic'),
                 justify='left', bg=background_color, fg=font_color)
cpu_text.place(relx=0, rely=0, x=20, y=20, anchor=NW)

# Presets
preset_x = 0.18
preset_y = 0.33
preset_list = frequencies[:6]
if frequencies.index(FREQ) > frequencies.index(frequencies[-2]):
    preset_list = frequencies[(frequencies.index(frequencies[-1]) - 5):]
    print(str(preset_list))
elif frequencies.index(FREQ) < frequencies.index(frequencies[1]):
    preset_list = frequencies[:(frequencies.index(frequencies[0]) + 6)]
    print(str(preset_list))
if len(preset_list) < 6:
    while len(preset_list) < 6:
        preset_list.append('Preset')
preset_count = 1
preset_rb_var = StringVar()
preset_rb_var.set(FREQ)
for i in preset_list:
    com = partial(preset_station, i)
    b_name = Radiobutton(master, command=com, text=i, variable=preset_rb_var, value=i,
                         selectcolor='black', fg=font_color, bg=background_color,
                         activeforeground=font_color, activebackground=background_color,
                         width=5, borderwidth=0, highlightcolor=background_color,
                         highlightbackground=background_color)
    b_name.config(font=('Quicksand Medium', 16, 'bold', 'italic'), pady=14, anchor=W)
    b_name.place(relx=preset_x, rely=preset_y)
    if preset_count % 2 != 0:
        preset_x += 0.14
    else:
        preset_x -= 0.14
        preset_y += 0.11
    preset_count += 1

# play button
play_image = PhotoImage(file='%splay_64x64.png' % icon_path)
stop_image = PhotoImage(file='%sstop-circle_64x64.png' % icon_path)
play_button = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                            image=play_image, release_command=lambda: start(FREQ))
play_button.place(relx=0.5, rely=1, x=0, y=-20, anchor=S)

# power button
power_image = PhotoImage(file='%spower_64x64.png' % icon_path)
power_button = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                             image=power_image, release_command=power_off)
power_button.place(relx=1, rely=1, x=-20, y=-20, anchor=SE)

# back button
back_image = PhotoImage(file='%sarrow-left-circle_64x64.png' % icon_path)
back_button = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                            image=back_image, release_command=back)
back_button.place(relx=0, rely=1, x=20, y=-20, anchor=SW)

# vol up button
vol_up_image = PhotoImage(file='%schevron-up_64x64.png' % icon_path)
vol_up = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                       image=vol_up_image, release_command=vol_up)
vol_up.place(relx=0, rely=0.5, x=20, y=-74, anchor=W)

# vol mute button
vol_image = PhotoImage(file='%svolume-2_64x64.png' % icon_path)
vol_mute_image = PhotoImage(file='%svolume-x_64x64.png' % icon_path)
vol_button = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                           image=vol_image, release_command=mute)
vol_button.place(relx=0, rely=0.5, x=20, y=0, anchor=W)

# vol down button
vol_down_image = PhotoImage(file='%schevron-down_64x64.png' % icon_path)
vol_down = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                         image=vol_down_image, release_command=vol_down)
vol_down.place(relx=0, rely=0.5, x=20, y=74, anchor=W)

# previous preset button
previous_image = PhotoImage(file='%sskip-back_64x64.png' % icon_path)
previous_button = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                                image=previous_image, release_command=previous_station)
previous_button.place(relx=0.5, rely=1, x=-74, y=-20, anchor=S)

# next preset button
next_image = PhotoImage(file='%sskip-forward_64x64.png' % icon_path)
next_button = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                            image=next_image, release_command=next_station)
next_button.place(relx=0.5, rely=1, x=74, y=-20, anchor=S)

# tune down button
tune_down_image = PhotoImage(file='%schevron-left_64x64.png' % icon_path)
tune_down_button = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                                 image=tune_down_image, press_command=tune_down,
                                 release_command=tuning_stop, repeatdelay=100, repeatinterval=200)
tune_down_button.place(relx=0.5, rely=1, x=-148, y=-20, anchor=S)

# tune up button
tune_up_image = PhotoImage(file='%schevron-right_64x64.png' % icon_path)
tune_up_button = RoundedButton(master, 64, 64, 8, 0, color='black', bg=background_color,
                               image=tune_up_image, press_command=tune_up,
                               release_command=tuning_stop, repeatdelay=100, repeatinterval=200)
tune_up_button.place(relx=0.5, rely=1, x=148, y=-20, anchor=S)

cpu_thread = threading.Thread(target=get_cpu_utilisation)
cpu_thread.start()

tick()
tune()
update_freq_label()
clear_station_data()
update_station_data()
update_play_button()
update_vol_button()
get_cpu_info()
mainloop()
